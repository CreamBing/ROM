<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.netposa.rom.dao.zimg.mysql.FaceTrainEntityMapper">
  <resultMap id="BaseResultMap" type="com.netposa.rom.model.zimg.FaceTrainEntity">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="md5" jdbcType="VARCHAR" property="md5" />
    <result column="x" jdbcType="INTEGER" property="x" />
    <result column="y" jdbcType="INTEGER" property="y" />
    <result column="w" jdbcType="INTEGER" property="w" />
    <result column="h" jdbcType="INTEGER" property="h" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="has_trained" jdbcType="BIT" property="hasTrained" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="label" jdbcType="INTEGER" property="label" />
    <result column="train_time" jdbcType="TIMESTAMP" property="trainTime" />
    <result column="forecast_name" jdbcType="VARCHAR" property="forecastName" />
    <result column="forecast_time" jdbcType="TIMESTAMP" property="forecastTime" />
    <result column="forecast_result" jdbcType="BIT" property="forecastResult" />
    <result column="has_deleted" jdbcType="BIT" property="hasDeleted" />
    <result column="has_recognized" jdbcType="BIT" property="hasRecognized" />
    <result column="recognize_time" jdbcType="TIMESTAMP" property="recognizeTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, md5, x, y, w, h, create_time, update_time, has_trained, name, label, train_time, 
    forecast_name, forecast_time, forecast_result, has_deleted, has_recognized, recognize_time
  </sql>
  <select id="selectByExample" parameterType="com.netposa.rom.model.zimg.FaceTrainEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_face_train
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_face_train
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_face_train
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.netposa.rom.model.zimg.FaceTrainEntityExample">
    delete from t_face_train
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.netposa.rom.model.zimg.FaceTrainEntity">
    insert into t_face_train (id, md5, x, y, 
      w, h, create_time, 
      update_time, has_trained, name, 
      label, train_time, forecast_name, 
      forecast_time, forecast_result, has_deleted, 
      has_recognized, recognize_time)
    values (#{id,jdbcType=INTEGER}, #{md5,jdbcType=VARCHAR}, #{x,jdbcType=INTEGER}, #{y,jdbcType=INTEGER}, 
      #{w,jdbcType=INTEGER}, #{h,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{hasTrained,jdbcType=BIT}, #{name,jdbcType=VARCHAR}, 
      #{label,jdbcType=INTEGER}, #{trainTime,jdbcType=TIMESTAMP}, #{forecastName,jdbcType=VARCHAR}, 
      #{forecastTime,jdbcType=TIMESTAMP}, #{forecastResult,jdbcType=BIT}, #{hasDeleted,jdbcType=BIT}, 
      #{hasRecognized,jdbcType=BIT}, #{recognizeTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.netposa.rom.model.zimg.FaceTrainEntity">
    insert into t_face_train
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
      <if test="md5 != null">
        md5,
      </if>
      <if test="x != null">
        x,
      </if>
      <if test="y != null">
        y,
      </if>
      <if test="w != null">
        w,
      </if>
      <if test="h != null">
        h,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="hasTrained != null">
        has_trained,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="label != null">
        label,
      </if>
      <if test="trainTime != null">
        train_time,
      </if>
      <if test="forecastName != null">
        forecast_name,
      </if>
      <if test="forecastTime != null">
        forecast_time,
      </if>
      <if test="forecastResult != null">
        forecast_result,
      </if>
      <if test="hasDeleted != null">
        has_deleted,
      </if>
      <if test="hasRecognized != null">
        has_recognized,
      </if>
      <if test="recognizeTime != null">
        recognize_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=INTEGER},
      <if test="md5 != null">
        #{md5,jdbcType=VARCHAR},
      </if>
      <if test="x != null">
        #{x,jdbcType=INTEGER},
      </if>
      <if test="y != null">
        #{y,jdbcType=INTEGER},
      </if>
      <if test="w != null">
        #{w,jdbcType=INTEGER},
      </if>
      <if test="h != null">
        #{h,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="hasTrained != null">
        #{hasTrained,jdbcType=BIT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="label != null">
        #{label,jdbcType=INTEGER},
      </if>
      <if test="trainTime != null">
        #{trainTime,jdbcType=TIMESTAMP},
      </if>
      <if test="forecastName != null">
        #{forecastName,jdbcType=VARCHAR},
      </if>
      <if test="forecastTime != null">
        #{forecastTime,jdbcType=TIMESTAMP},
      </if>
      <if test="forecastResult != null">
        #{forecastResult,jdbcType=BIT},
      </if>
      <if test="hasDeleted != null">
        #{hasDeleted,jdbcType=BIT},
      </if>
      <if test="hasRecognized != null">
        #{hasRecognized,jdbcType=BIT},
      </if>
      <if test="recognizeTime != null">
        #{recognizeTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.netposa.rom.model.zimg.FaceTrainEntityExample" resultType="java.lang.Long">
    select count(*) from t_face_train
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_face_train
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.md5 != null">
        md5 = #{record.md5,jdbcType=VARCHAR},
      </if>
      <if test="record.x != null">
        x = #{record.x,jdbcType=INTEGER},
      </if>
      <if test="record.y != null">
        y = #{record.y,jdbcType=INTEGER},
      </if>
      <if test="record.w != null">
        w = #{record.w,jdbcType=INTEGER},
      </if>
      <if test="record.h != null">
        h = #{record.h,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.hasTrained != null">
        has_trained = #{record.hasTrained,jdbcType=BIT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.label != null">
        label = #{record.label,jdbcType=INTEGER},
      </if>
      <if test="record.trainTime != null">
        train_time = #{record.trainTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.forecastName != null">
        forecast_name = #{record.forecastName,jdbcType=VARCHAR},
      </if>
      <if test="record.forecastTime != null">
        forecast_time = #{record.forecastTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.forecastResult != null">
        forecast_result = #{record.forecastResult,jdbcType=BIT},
      </if>
      <if test="record.hasDeleted != null">
        has_deleted = #{record.hasDeleted,jdbcType=BIT},
      </if>
      <if test="record.hasRecognized != null">
        has_recognized = #{record.hasRecognized,jdbcType=BIT},
      </if>
      <if test="record.recognizeTime != null">
        recognize_time = #{record.recognizeTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_face_train
    set id = #{record.id,jdbcType=INTEGER},
      md5 = #{record.md5,jdbcType=VARCHAR},
      x = #{record.x,jdbcType=INTEGER},
      y = #{record.y,jdbcType=INTEGER},
      w = #{record.w,jdbcType=INTEGER},
      h = #{record.h,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      has_trained = #{record.hasTrained,jdbcType=BIT},
      name = #{record.name,jdbcType=VARCHAR},
      label = #{record.label,jdbcType=INTEGER},
      train_time = #{record.trainTime,jdbcType=TIMESTAMP},
      forecast_name = #{record.forecastName,jdbcType=VARCHAR},
      forecast_time = #{record.forecastTime,jdbcType=TIMESTAMP},
      forecast_result = #{record.forecastResult,jdbcType=BIT},
      has_deleted = #{record.hasDeleted,jdbcType=BIT},
      has_recognized = #{record.hasRecognized,jdbcType=BIT},
      recognize_time = #{record.recognizeTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.netposa.rom.model.zimg.FaceTrainEntity">
    update t_face_train
    <set>
      <if test="md5 != null">
        md5 = #{md5,jdbcType=VARCHAR},
      </if>
      <if test="x != null">
        x = #{x,jdbcType=INTEGER},
      </if>
      <if test="y != null">
        y = #{y,jdbcType=INTEGER},
      </if>
      <if test="w != null">
        w = #{w,jdbcType=INTEGER},
      </if>
      <if test="h != null">
        h = #{h,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="hasTrained != null">
        has_trained = #{hasTrained,jdbcType=BIT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="label != null">
        label = #{label,jdbcType=INTEGER},
      </if>
      <if test="trainTime != null">
        train_time = #{trainTime,jdbcType=TIMESTAMP},
      </if>
      <if test="forecastName != null">
        forecast_name = #{forecastName,jdbcType=VARCHAR},
      </if>
      <if test="forecastTime != null">
        forecast_time = #{forecastTime,jdbcType=TIMESTAMP},
      </if>
      <if test="forecastResult != null">
        forecast_result = #{forecastResult,jdbcType=BIT},
      </if>
      <if test="hasDeleted != null">
        has_deleted = #{hasDeleted,jdbcType=BIT},
      </if>
      <if test="hasRecognized != null">
        has_recognized = #{hasRecognized,jdbcType=BIT},
      </if>
      <if test="recognizeTime != null">
        recognize_time = #{recognizeTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.netposa.rom.model.zimg.FaceTrainEntity">
    update t_face_train
    set md5 = #{md5,jdbcType=VARCHAR},
      x = #{x,jdbcType=INTEGER},
      y = #{y,jdbcType=INTEGER},
      w = #{w,jdbcType=INTEGER},
      h = #{h,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      has_trained = #{hasTrained,jdbcType=BIT},
      name = #{name,jdbcType=VARCHAR},
      label = #{label,jdbcType=INTEGER},
      train_time = #{trainTime,jdbcType=TIMESTAMP},
      forecast_name = #{forecastName,jdbcType=VARCHAR},
      forecast_time = #{forecastTime,jdbcType=TIMESTAMP},
      forecast_result = #{forecastResult,jdbcType=BIT},
      has_deleted = #{hasDeleted,jdbcType=BIT},
      has_recognized = #{hasRecognized,jdbcType=BIT},
      recognize_time = #{recognizeTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>